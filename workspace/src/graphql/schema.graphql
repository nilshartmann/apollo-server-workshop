"""
This is a `Story`.
"""
type Story {
  id: ID!
  title: String!
  body: String!
  createdAt: String!

  excerpt(maxLength: Int! = 20): String!

  writtenBy: Member!
  comments: [Comment!]!
}

type Comment {
  id: ID!
  createdAt: String!

  story: Story!
  writtenBy: Member!
  content: String!
}

type User {
  id: ID!
  fullname: String!
  login: String!
}

type Member {
  id: ID!

  profileImage: String!
  """
  Short biography of a member. Optional.
  """
  bio: String
  user: User
  stories: [Story!]!
}

type PageResult {
  pageNumber: Int!
  totalCount: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

"""
A **StoryList** represents a connection in our graph from one
node to a list of `Story` nodes: `Query --> StoryList --> Story`
"""
type StoryList {
  page: PageResult!

  stories: [Story!]!
}

type Query {
  """
  Returns `hello` if backend is working
  """
  ping: String!

  "Returns the given `Story` or null if this Story is not available"
  story(storyId: ID!): Story

  allStories: [Story!]!

  #  # SCHRITT 2: --------------------------------------------
  """
  Returns the requested amount of stories, ordered by date, so
  that newest/latest stories come first
  """
  stories(page: Int! = 0, pageSize: Int! = 3): StoryList!

  comments(storyId: ID!): [Comment!]!

  """
  Return the current logged in Member (as read from the `X-Authorization` HTTP-Header) or null
  if no member is logged in
  """
  me: Member
}

input AddCommentInput {
  storyId: ID!
  content: String!
}

type AddCommentSuccessPayload {
  newComment: Comment!
}

type AddCommentFailedPayload {
  errorMsg: String!
}

union AddCommentPayload = AddCommentSuccessPayload | AddCommentFailedPayload

type Mutation {
  addComment(input: AddCommentInput!): AddCommentPayload!
}

type OnNewCommentEvent {
  newComment: Comment!
}

type Subscription {
  onNewComment(storyId: ID!): OnNewCommentEvent!
}
